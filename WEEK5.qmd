---
title: "Google Earth Engine"
---

## Summary

[Google Earth Engine (GEE)](https://earthengine.google.com/) is a platform for scientific analysis and visualization of geospatial data sets for academic, public interest, corporate and government users. It is an online software that stores data on servers, and the code is run on the client side - browser. Because of this characteristic, GEE can achieve geospatial analysis with massive data sets within seconds, which gives it a huge advantage. Some terms in GEE have been renamed, for example, the raster and vector data are called "Image" and "Feature" in GEE. And GEE uses the website programming language - Javascript to conduct.

<center>![](API.png){width="75%"}</center>

Source: [Bikesh Bade](https://bikeshbade.com.np/tutorials/Detail/?title=Introduction%20to%20the%20Google%20Earth%20Engine%20Python%20API&code=10)

Now, let's turn to begin the GEE in action! The first thing we need to know what GEE code editor looks like and its function. In general, it has four parts: The bottom of the page is the map, which you can slide and mark randomly; the middle of the top is the code editor, the left side of it mainly displays the online project you created and the uploaded files, and the right side is the output area.

<center>![](GEE.png){width="80%"}</center>

Source: [Andy MacLachlan](https://andrewmaclachlan.github.io/CASA0023-lecture-5/#27)

**After understanding the GEE code editor pages, turning to some methods and coding:**

#### Loading feature collection

If we want to know the geometries and features of an area, we can upload the shapefile and load it, which can output a feature collection (`India`). If we just want the polygon and single point rather than the whole area, we can filter it (`Dheli`).

```{r, eval=FALSE}
#| echo: true
// Loading a feature collection
var India = ee.FeatureCollection('projects/ee-lwdfish/assets/gadm41_IND_2')
print(India, "India");
Map.addLayer(India, {}, "India");

//Loading just one polygon for point
var Dheli = ee.FeatureCollection('projects/ee-lwdfish/assets/gadm41_IND_2')
    .filter('GID_1 == "IND.25_1"');
print(Dheli, "Dheli");
Map.addLayer(Dheli, {}, "Dheli");
```

<center>

::: {layout-ncol="2" layout-valign="bottom"}
![India](india.png){width="30%"}

![Dheli](Dheli.png){width="30%"}
:::

</center>

Source: Output from practical, Wendi Li

#### Mosaic images

When we look at images, it may be very apparent differences between the tiles (`spatial mosaic`), which is probably due to the date of collection and the atmospheric correction applied[(Andy MacLachlan)](https://andrewmaclachlan.github.io/CASA0023-lecture-5/#27). To deal with this "mosaic images", we can take the average value (`mean`).

```{r, eval=FALSE}
#| echo: true

// Before averaging: Mosaic images
var mosaic = oneimage_study_area_cloud_scale.mosaic();
var vis_params2 = {
  bands: ['SR_B4', 'SR_B3', 'SR_B2'],
  min: 0.0,
  max: 0.3,
};
Map.addLayer(mosaic, vis_params2, 'spatial mosaic');

// After averaging
var meanImage = oneimage_study_area_cloud_scale.mean();

Map.addLayer(meanImage, vis_params2, 'mean');
```

<center>

::: {layout-ncol="2" layout-valign="bottom"}
![Before averaging](before.png){width="30%"}

![After averaging](after.png){width="30%"}
:::

</center>

Source: Output from practical, Wendi Li

#### Texture measures

[`glcmTexture()` function](https://www.mathworks.com/help/images/texture-analysis-using-the-gray-level-co-occurrence-matrix-glcm.html) calculates the urface reflectance values and extracting statistical measures from this matrix to describe the texture. A important point here is we need to multiple the surface reflectance values to computer or the texture would just be 1s and 0s.

```{r, eval=FALSE}
#| echo: true
var glcm = clip.select(['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7'])
  .multiply(1000)
  .toUint16()
  .glcmTexture({size: 1})
  .select('SR_.._contrast|SR_.._diss')
  .addBands(clip);
  
// add to the map, but change the range values  
Map.addLayer(glcm, {min:14, max: 650}, 'glcm');
```

<center>![Texture measures](texture.png){width="70%"}</center>

Source: Output from practical, Wendi Li

## Application

#### Application of Google Earth Engine in wildfires model

::: callout-note
# Paper
Sulova, A., Jokar Arsanjani, J., 2021. **Exploratory Analysis of Driving Force of Wildfires in Australia: An Application of Machine Learning within Google Earth Engine**. Remote Sensing 13, 10. https://doi.org/10.3390/rs13010010
:::

<center>![Defining the interest area of Australian mainland bounds based on GEE](border.png){width="80%"}</center>

Source: [Sulova and Jokar Arsanjani, 2021](https://www.mdpi.com/2072-4292/13/1/10)

::: callout-tip
## My comment on methodology

This paper build a wildfire prediction model based on GEE platform. Here, the role of GEE is primarily to provide a large source of complete and free data, and provides a platform for the data-driven modeling. I think this is a typical and good sample for the usage of GEE, which it provides an idea about applying machine learning in GEE and it shows the data advantages that GEE has.
:::

## Personal Reflection

This week I have learned a very useful online platform - Google Earth Engine (GEE). I think the most helpful point of GEE is the convenience of obtaining data because we only need a small amount of code to use the online data, instead of going to different websites (e.g. Landsat, Sentinel) to download data and load it into the software again. In addition, the online operation makes it less storage or space requirements for our computers. Through reading papers, I also known that GEE platform can also be used to support model building.

In the later learning and research, I think GEE will be the most strong tool for me. But the biggest difficulty for me at the moment is that I have not used the Javascript language, resulting in I can't understand some codes. Therefore, I will focus on learning the basic programming language in the next step of learning to support the subsequent use.
